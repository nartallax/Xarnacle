About class system, method linkage and so on.

Entities that represent class system are Structure, Class and Trait.
The difference is
	* Trait can be inherited and cannot be instantiated
	* Class can be instantiated and cannot be inherited, but can be inherited from Traits; have reflexive information attached to every instance
	* Structure can be instantiated, cannot be inherited and cannot inherit from Traits; have no reflexive information attached

Such system is defined for following reasons:
* Optimization: Structure and Class will always have constant set of methods, so we can link them statically (at least sometimes).
* Explicit generalization: most of the time, code that uses classes instead of interfaces is not intended to be reused with class instances inheriting original class; i.e. ability to inherit arbitrary class don't grant code flexibility its meant to grant. Every effort to make code more flexible should be explicit; that is, methods working with interfaces (Traits), not classes.

All these entities have fields and methods. Traits can also have methods without implementation (while Classes and Structuress obviously can not).
Methods could have accessibility restrictions: they could be private, public and protected. Class and Structuress could not have protected methods (as it won't be different from private). Private methods may not be inherited.
Private methods are always linked statically.
Public methods of Traits can also be marked final. It makes them non-inheritable. Such mark could help achieving static linkage.
All the functions have the same calling convention - that is, default for the platform; but if cdecl is possible to use, it is used.

Dynamic linkage is achieved through reflection.
To achieve reflection, every class instance have a pointer to description of the class. This description includes all the method desciptions of class, information about inheritance tree and so on.

Instances of Classes and Structures are passed by reference, as they are structs.
But not every value is instance of some Class or Structure; some values are scalars and usually passed by value.
This difference becomes really big when speaking about generic classes and methods.

To make creating of generic classes easier, there is some pseudotypes: 
	* Any (literally, any type)
		* Scalar (that is some simple fixed-size type; some number most of the time)
		* Object (common reference type)
			* Structure (instance of struct class)
			* Instance (full-weight instance of some class).
Reflection is only possible for Instance values; any other value have no attached pointer to a class.

Generally (speaking of class/method that have Object type parameter) any generic method could accept as parameter and return as result a pointer to real value, and (in case of collections) store values as pointer as well.
But in case of scalars that is not acceptable: always using scalar by reference is a performance hit (consider Array of byte for example); and, as long as scalars have multiple sizes (1, 2, 4, 8 bytes) it's not possible to write single function that will accept any scalar value and handle it in expected way.
Unrolling is solution in this case. That is, any generic method/class definition that could accept scalar value will be generated 1 'default' implementation (for reference types) and 4 'scalar' implementations (one for each scalar size).
This is the reason why generic parameters must not be dereferenced: they are not always the references.